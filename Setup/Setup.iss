; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#include AddBackslash(CompilerPath) + "ISPPBuiltins.iss"

#define MainFileHead "MouseMAC"
#define MainWindowClass "TMouseExForm"
#define AppMutex "MouseMACMutex"
#define AppPublisherURL "http://mousemac.tarcode.ru"
#define AppSupportURL "http://mousemac.tarcode.ru"
#define AppUpdatesURL "http://mousemac.tarcode.ru"
#define SetupPostfix "Setup"

#define MainFileName MainFileHead + BitsInstall + ".exe"
#define Build "..\Build\"
#define MainFile AddBackslash(SourcePath) + Build + MainFileName

#define AppName GetFileDescription(MainFile)  
#define AppVersion GetFileVersion(MainFile)
#define FileCompany GetFileCompany(MainFile)
#define FileCopyright GetFileCopyright(MainFile) 
#define Description GetFileDescription(MainFile)
#define ProductName GetStringFileInfo(MainFile, PRODUCT_NAME)
#define ProductVersion GetFileProductVersion(MainFile)

#define InstallFolder AppName

[Setup]
; NOTE: The value of AppId uniquely identifies this application.
; Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={#ProductName}
AppName={#ProductName}
AppVersion={#AppVersion}
AppVerName={#AppName} {#AppVersion}
AppCopyright={#FileCopyright}
AppPublisher={#FileCompany}
AppPublisherURL={#AppPublisherURL}
AppSupportURL={#AppSupportURL}
AppUpdatesURL={#AppUpdatesURL}
DisableWelcomePage=no
DefaultDirName={localappdata}\{#InstallFolder}
DefaultGroupName={#AppName}
AllowNoIcons=yes
OutputDir={#Build}
OutputBaseFilename={#MainFileHead}{#SetupPostfix}{#BitsInstall}
SetupIconFile="..\Icon\icon.ico"
Compression=lzma
SolidCompression=yes
PrivilegesRequired=asis
ArchitecturesInstallIn64BitMode={#if BitsInstall == '64'}x64{#endif}
MinVersion=0,5.01
UninstallDisplayName={#ProductName}
UninstallDisplayIcon={app}\{#MainFileName}
AppMutex={code:GetAppMutex}
DisableDirPage=no
DirExistsWarning=auto
UsePreviousAppDir=yes
Uninstallable=IsUninstallable()
VersionInfoVersion={#AppVersion}
VersionInfoCopyright={#FileCopyright}
VersionInfoDescription={#Description} {#SetupPostfix}
VersionInfoProductName={#ProductName}
VersionInfoProductVersion={#ProductVersion}
WizardImageFile=Image\WizardImage.bmp
WizardSmallImageFile=Image\WizardImageSmall.bmp

#include "Localization.iss"
#include "Framework/Versions.Helpers.iss"
#include "Framework/Process.Kill.iss"
#include "Framework/Setup.InstallType.Gui.iss"

[Tasks]
Name: "desktopicon"; Description: "{cm:CreateDesktopIcon}"; GroupDescription: "{cm:AdditionalIcons}"; Flags: unchecked; Check: not IsPortableOnly
Name: "AutoRun"; Description: "{cm:AutoStartProgram,{#AppName}}"; GroupDescription: "{cm:AutoStartProgramGroupDescription}"; Check: not IsPortableOnly

[Files]
Source: "{#Build}{#MainFileName}"; DestDir: "{app}"; Flags: ignoreversion
; NOTE: Don't use "Flags: ignoreversion" on any shared system files

[Icons]
Name: "{group}\{#ProductName}"; Filename: "{app}\{#MainFileName}"; IconFilename: "{app}\{#MainFileName}"; IconIndex: 0
Name: "{commondesktop}\{#ProductName}"; Filename: "{app}\{#MainFileName}"; Tasks: desktopicon

[Run]
Filename: "{app}\{#MainFileName}"; Description: "{cm:LaunchProgram,{#ProductName}}"; Flags: nowait postinstall skipifsilent; Check: not IsPortableOnly

[Code]

procedure AddAutorun();
var
	ResultCode: Integer;
begin
	Exec(ExpandConstant('{app}\{#MainFileName}'), '-AutorunForce', '', SW_HIDE, ewWaitUntilTerminated, ResultCode)
end;

procedure DelAutorun();
var
	ResultCode: Integer;
begin
	Exec(ExpandConstant('{app}\{#MainFileName}'), '-DelAutorun', '', SW_HIDE, ewWaitUntilTerminated, ResultCode)
end;

function GetAppMutex(Param: String): string;
begin
	if IsWindowsVistaOrGreater then
		Result := ''
	else
		Result := ExpandConstant('{#AppMutex}');
end;

procedure OnCurStepChanged(CurrentStep: TSetupStep);
begin
	if (CurrentStep = ssPostInstall) then
	begin
		if (IsTaskSelected('AutoRun')) then
		begin
			DelAutorun();
			AddAutorun();
		end;
	end;
end;

procedure OnCurUninstallStepChanged(CurUninstallStep: TUninstallStep);
begin
	if CurUninstallStep = usUninstall then
	begin
		SendCloseMessageByClassName('{#MainWindowClass}');
		DelAutorun();
	end;
end;

function InitializeSetup(): Boolean;
begin
	if ParamExists('/h') then
	begin
		MsgBox('The Setup program accepts advanced command line parameters.' + #13#10 + #13#10 +
			'/Portable' + #13#10 +
			'/InstallType=AllUser|JustForMe|Portable' + #13#10 + #13#10 +
			'For more detailed information, please restart with /HELP parameter', mbInformation, MB_OK);
		Result := False;
		Exit;
	end;
	InstallTypeGuiInit();
	ConnectOnCurStepChanged(@OnCurStepChanged);  
	Result := True;
end;

function InitializeUninstall(): Boolean;
begin
	ConnectOnCurUninstallStepChanged(@OnCurUninstallStepChanged);
	Result := True;
end;
